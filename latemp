#!/usr/bin/env bash

# This is the directory in which to store the template files
# CHANGE THIS IS YOU WANT ANOTHER DIRECTORY FOR YOUR TEMPLATES
templateDirectory=~/Documents/latextemplates

# Declare program to open
# If a GUI program such as TeXstudio or Texmaker is chosen, no pdfviewer will be opened since they are build in
# CHANGE THESE IF YOU WANT TO USE A DIFFERENT EDITOR/PDFVIEWER
editor="vim"
pdfViewer="mupdf"

# Check if the $editor is terminalbased.
# If you have a terminalbased editor not on the list, just add it.
case $editor in
	vim|emacs|nano) terminalBasedEditor=1 ;;
	*) terminalBasedEditor=0 ;;
esac

# Check so that there is only two inputs
# One for the template used, and one for the new name of the file
if [[ $# -lt 2 || $# -gt 2 ]]; then
	printOptions
fi

# Populate template dictionary
n=0
for filePath in $templateDirectory/*.tex;
do
	# Strip the file extension
	pathToBase=${filePath%.tex}

	# Name of the whole file, ##*/ removes everything up to the last /
	name=${filePath##*/}
	# Removes the trailing .tex
	base=${name%.tex}

	# Save file path with the key of template name
	# If on old bash, make a normal array to where separation between key and value will be ::
	templateBase[$n]=$base
	templatePathToBase[$n]=$pathToBase

	# If value entered was found, remember which template
	# If no value was entered, this is always false
	if  [[ $1 == ${base} ]]; then
		indexOfTemplate=$n
	fi
	n=$((n+1))
done

function printOptions {
	echo "--- Example usage ---"
	echo
	echo "  - Open a copy of templateName called newProject.tex/pdf in your current directory - "
	echo "	\$ latemp templateName newProject"
	echo
	echo "--- Available templates ---"
	echo
	# Extract available templates and their file location
	N=${#templateBase[@]}
	for n in $(seq 0 $((N-1)));
	do
		echo "${templateBase[n]}, - File location: ${templatePathToBase[n]}.tex"
	done
	echo
	echo "--- Current settings ---"
	echo
	echo "Editor: $editor"
	echo "Pdf viewer: $pdfViewer"
	echo
	echo "Latex templates directory: $templateDirectory"
	exit 0
}

# Check if input is an available template
if [[ " ${templateBase[@]} " =~ " $1 " ]]; then
	pathToBasename=${templatePathToBase[$indexOfTemplate]}

	# Copy template to the current directory
	# If there is an already compiled pdf, copy that aswell
	# This only helps with an overview of the template
	if [ -f $pathToBasename.pdf ]; then
		cp $pathToBasename.tex "./$2.tex"
		cp $pathToBasename.pdf "./$2.pdf"
	else
		cp $pathToBasename.tex "./$2.tex"
	fi

	# Check if Mac or Linux
	if [ "$(uname)" == "Darwin" ]; then
		if [ $terminalBasedEditor == 1 ]; then
			# Opens $pdfViewer if a pdf exists
			if [ -f ./$2.pdf ]; then
				$pdfViewer ./$2.pdf &
			fi

			# Open $editor with input and output from/to current tty
			$editor ./$2.tex < `tty` > `tty`
		else
			# Open $editor from the Applications folder on mac
			open -a $editor ./$2.tex
		fi
	elif [ "$(uname)" == "Linux" ]; then
		if [ $terminalBasedEditor == 1 ]; then
			# Opens $pdfViewer if a pdf exists
			if [ -f ./$2.pdf ]; then
				$pdfViewer ./$2.pdf &
			fi

			# Open $editor with output to current tty and input from current tty
			$editor ./$2.tex < `tty` > `tty`
		else
			$editor ./$2.tex
		fi
	fi
else
	echo "Input didn't correspond to any available templates"
	echo "You might not have a ~/latextemplates folder"
	echo "Or you might not have $1.tex in the  ~/latextemplates folder"
	echo
	printOptions
fi
